import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
from sklearn import linear_model
from sklearn.linear_model import LogisticRegression
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
import time
from warnings import simplefilter
#--------------  PREPERATION OF TRAIN AND TEST DATA SETS  --------------------#


#GENEREATING A NEW SUCCESS COLUMN AND ASSIGNING EACH RESTARUANTS' SUCCESS: 1 FOR SUCCESS 0 FOR FAIL
#If a restaurant's rate is greater or equal to average rate of restaurants at its location;
#It is counted as successful else failed
zomato["success"] = ""

for i in range(zomato.shape[0]):
    for j in range (rest_locs.shape[0]):
        if zomato.loc[i,"location"] == rest_locs.loc[j,"location"]:
            if zomato.loc[i,"rate"] >= rest_locs.loc[j,"rate"]:
                zomato.loc[i,"success"] = 1
            else:
                zomato.loc[i,"success"] = 0
             

#DUMMYING CATEGORICAL ATTRIBUTES FOR MODELLING
zomato_x = zomato.loc[:,"name":"meals"]
zomato_x = zomato_x.drop(['dish_liked'], axis=1) #dish_liked attribute has no correlation
zomato_x = pd.get_dummies(zomato_x)
zomato_y = zomato.loc[:,"success"]

 
#------------------  LOGISTIC REGRESSION - 10 TIMES  -------------------------#

lg_reg_accuracy_percentage_tot = 0
time_lg_reg_tot = 0

for m in range (10):
#SPLITTING DATA TO TRAIN AND TEST SETS    
    zomato_x_train, zomato_x_test, zomato_y_train, zomato_y_test = train_test_split(zomato_x, zomato_y, test_size=0.2)
    zomato_y_test = zomato_y_test.reset_index(drop=True)

    tic_lg_reg = time.time()

#LOGISTIC REGRESSION ALGORITHM APPLICATION
    lg_reg = LogisticRegression()
    model_lg_reg = lg_reg.fit(zomato_x_train, zomato_y_train)
    lg_reg_predictions = model_lg_reg.predict(zomato_x_test)

#LOGISTIC REGRESSION'S PREDICTION ACCURACY
    true_lg_reg = 0
    for i in range (len(lg_reg_predictions)):
        if zomato_y_test[i] == lg_reg_predictions[i]:
            true_lg_reg += 1
    lg_reg_accuracy_percentage = (true_lg_reg/len(lg_reg_predictions))*100

    toc_lg_reg = time.time()
    time_lg_reg = toc_lg_reg-tic_lg_reg
   
    lg_reg_accuracy_percentage_tot += lg_reg_accuracy_percentage
    time_lg_reg_tot += time_lg_reg
   
    simplefilter(action='ignore', category=FutureWarning)
           
lg_reg_accuracy_percentage = lg_reg_accuracy_percentage_tot/10    
time_lg_reg = time_lg_reg_tot/10

simplefilter(action='ignore', category=FutureWarning)

#----------------------  DECISION TREE - 10 TIMES  ---------------------------#

dec_tree_accuracy_percentage_tot = 0
time_dec_tree_tot = 0

for m in range (10):
#SPLITTING DATA TO TRAIN AND TEST SETS    
    zomato_x_train, zomato_x_test, zomato_y_train, zomato_y_test = train_test_split(zomato_x, zomato_y, test_size=0.2)
    zomato_y_test = zomato_y_test.reset_index(drop=True)

    tic_dec_tree = time.time()

#DECISION TREE ALGORITHM APPLICATION
    dec_tree = tree.DecisionTreeClassifier()
    model_dec_tree = dec_tree.fit(zomato_x_train, zomato_y_train)
    dec_tree_predictions = model_dec_tree.predict(zomato_x_test)

#DECISION TREE ALGORITHM'S PREDICTION ACCURACY
    true_dec_tree = 0
    for i in range (len(dec_tree_predictions)):
        if zomato_y_test[i] == dec_tree_predictions[i]:
            true_dec_tree += 1
    dec_tree_accuracy_percentage = (true_dec_tree/len(dec_tree_predictions))*100

    toc_dec_tree = time.time()
    time_dec_tree = toc_dec_tree-tic_dec_tree
   
    dec_tree_accuracy_percentage_tot += dec_tree_accuracy_percentage
    time_dec_tree_tot += time_dec_tree
       
dec_tree_accuracy_percentage = dec_tree_accuracy_percentage_tot/10    
time_dec_tree = time_dec_tree_tot/10


#----------------------  RANDOM FOREST - 10 TIMES ----------------------------#

rand_forest_accuracy_percentage_tot = 0
time_rand_forest_tot = 0

for m in range (10):
#SPLITTING DATA TO TRAIN AND TEST SETS    
    zomato_x_train, zomato_x_test, zomato_y_train, zomato_y_test = train_test_split(zomato_x, zomato_y, test_size=0.2)
    zomato_y_test = zomato_y_test.reset_index(drop=True)

    tic_rand_forest = time.time()

#RANDOM FOREST ALGORITHM APPLICATION
    rand_forest = RandomForestClassifier()
    model_rand_forest = rand_forest.fit(zomato_x_train, zomato_y_train)
    rand_forest_predictions = model_rand_forest.predict(zomato_x_test)

#RANDOM FOREST ALGORITHM'S PREDICTION ACCURACY
    true_rand_forest = 0
    for i in range (len(rand_forest_predictions)):
        if zomato_y_test[i] == rand_forest_predictions[i]:
            true_rand_forest += 1
    rand_forest_accuracy_percentage = (true_rand_forest/len(rand_forest_predictions))*100

    toc_rand_forest = time.time()
    time_rand_forest = toc_rand_forest-tic_rand_forest
   
    rand_forest_accuracy_percentage_tot += rand_forest_accuracy_percentage
    time_rand_forest_tot += time_rand_forest
   
    simplefilter(action='ignore', category=FutureWarning)
   
rand_forest_accuracy_percentage = rand_forest_accuracy_percentage_tot/10    
time_rand_forest = time_rand_forest_tot/10

simplefilter(action='ignore', category=FutureWarning)

#--------------------------  KNN - 10 TIMES ----------------------------------#

knn_accuracy_percentage_tot = 0
time_knn_tot = 0

for m in range (10):
#SPLITTING DATA TO TRAIN AND TEST SETS    
    zomato_x_train, zomato_x_test, zomato_y_train, zomato_y_test = train_test_split(zomato_x, zomato_y, test_size=0.2)
    zomato_y_test = zomato_y_test.reset_index(drop=True)

    tic_knn = time.time()

#K-NEAR NEIGHBORS ALGORITHM APPLICATION
    knn = KNeighborsClassifier(n_neighbors=2, metric='euclidean')
    model_knn = knn.fit(zomato_x_train, zomato_y_train)
    knn_predictions = model_knn.predict(zomato_x_test)

#RANDOM FOREST ALGORITHM'S PREDICTION ACCURACY
    true_knn = 0
    for i in range (len(knn_predictions)):
        if zomato_y_test[i] == knn_predictions[i]:
            true_knn += 1
    knn_accuracy_percentage = (true_knn/len(knn_predictions))*100

    toc_knn = time.time()
    time_knn = toc_knn-tic_knn
   
    knn_accuracy_percentage_tot += knn_accuracy_percentage
    time_knn_tot += time_knn
       
knn_accuracy_percentage = knn_accuracy_percentage_tot/10    
time_knn = time_knn_tot/10

#------------------------ COMPARISON OF ALGORITHMS ---------------------------#

algorithms = pd.DataFrame(["Logistic Regression","Decision Tree","Random Forest","KNN"], columns =["Algorithm"])
algorithm_scores = pd.DataFrame([lg_reg_accuracy_percentage,dec_tree_accuracy_percentage,rand_forest_accuracy_percentage,knn_accuracy_percentage], columns=["Accuracy,%"])
algorithm_times = pd.DataFrame([time_lg_reg,time_dec_tree,time_rand_forest,time_knn], columns=["Spend time,s"])
comparison = pd.concat([algorithms,algorithm_scores,algorithm_times], axis=1)
comparison  = comparison.sort_values(["Accuracy,%"], ascending = False)
comparison  = comparison.reset_index(drop=True)
